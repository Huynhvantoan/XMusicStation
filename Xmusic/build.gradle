apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'realm-android'

int MILLIS_IN_MINUTE = 1000 * 60
int minutesSinceEpoch = System.currentTimeMillis() / MILLIS_IN_MINUTE

android {
    compileSdkVersion build_versions.target_sdk
    defaultConfig {
        applicationId build_versions.app_id
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode build_versions.versionCode
        versionName build_versions.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
    }
    signingConfigs {
        Key {
            try {
                storeFile file(key_store.keystore)
                storePassword key_store.keystorePass
                keyAlias key_store.alias
                keyPassword key_store.aliasPass
            }
            catch (ignored) {
                throw new InvalidUserDataException("You should define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties.")
            }
        }
    }
    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            buildConfigField("String", "APP_NAME", "\"XmusicStation\"")
            buildConfigField("String", "BASE_URL", "\"http://api.karaokecuatui.vn/api/\"")
            buildConfigField("String", "LINK_MEDIA", "\"http://kctobjobj.0dbfaf33.cdnviet.com\"")
            buildConfigField("String", "API_USER", "\"apikct\"")
            buildConfigField("String", "API_PASSWORD", "\"tqKviry6a3yPMj\"")
        }
        release {
            signingConfig signingConfigs.Key
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    key_store.proguard_rules,key_store.proguard_rx,key_store.proguard_square,key_store.proguard_support
            buildConfigField("String", "APP_NAME", "\"XmusicStation\"")
            buildConfigField("String", "BASE_URL", "\"http://api.karaokecuatui.vn/api/\"")
            buildConfigField("String", "LINK_MEDIA", "\"http://kctobjobj.0dbfaf33.cdnviet.com\"")
            buildConfigField("String", "API_USER", "\"apikct\"")
            buildConfigField("String", "API_PASSWORD", "\"tqKviry6a3yPMj\"")
        }
    }
    lintOptions {
        textOutput "stdout"
        textReport true
        checkAllWarnings true
        warningsAsErrors true
        showAll true
        explainIssues true
        abortOnError false
        lintConfig file("$projectDir/lint.xml")
    }
    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'LICENSE.txt'
        exclude 'META-INF/license/LICENSE.base64.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/rxjava.properties'
        exclude 'META-INF/MANIFEST.MF'
    }
    androidExtensions {
        experimental = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    dexOptions {
        maxProcessCount 4
        preDexLibraries false
        javaMaxHeapSize "8g"
    }
    applicationVariants.all { variant ->
        if (variant.buildType.name == "release") {
            variant.mergedFlavor.versionCode = minutesSinceEpoch
            variant.mergedFlavor.versionName = minutesSinceEpoch + "-" + variant.flavorName
        }
    }
    sourceSets {
        main {
            res.srcDirs = [
                    'src/main/res-main',
                    file('src/main/res-screen')
                            .listFiles()
                            .each { res.srcDirs += it.path }
            ]
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
    dataBinding {
        enabled = true
    }
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xmaxerrs" << "500" // or whatever number you want
        }
    }
}
kotlin {
    experimental {
        coroutines "enable"
    }
}
dependencies {
    implementation project(':Core')
    // Data binding
    kapt deps.databinding
    // Kotlin
    implementation deps.kotlin.stdlib
    // Support libraries
    // Support libraries
    implementation deps.support.app_compat
    implementation deps.support.annotations
    implementation deps.support.design
    //Core
    for (dependency in deps.core) {
        implementation dependency.value
    }
    //Retrofit
    for (dependency in deps.retrofit) {
        implementation dependency.value
    }
    //Library
    for (dependency in deps.library) {
        implementation dependency.value
    }
    // Architecture components
    implementation deps.lifecycle.runtime
    implementation deps.lifecycle.extensions
    implementation deps.lifecycle.java8
    kapt deps.lifecycle.compiler
    // Dagger 2
    implementation deps.dagger.runtime
    implementation deps.dagger.android
    implementation deps.dagger.android_support
    kapt deps.dagger.android_support_compiler
    kapt deps.dagger.compiler
    //implementation 'com.android.support:multidex:1.0.2'
    // Test
    debugImplementation deps.test.leakcanary
    releaseImplementation deps.test.leakcanary_no_op
    testImplementation deps.test.leakcanary_no_op
}
